#           Autor:
#   María Alexandra Guardia Canche
#   alexandra.guardia.25@gmail.com
#   Versión 1.0 : 13/02/2025

import numpy as np  # Importa NumPy para cálculos numéricos.
import matplotlib.pyplot as plt  # Importa Matplotlib para generar gráficos.

# Definir la función que va a utilizarse en el método de bisección.
def f(x):
    return np.exp(-x) - x  # Función f(x) = e^(-x) - x.

# Algoritmo numérico del método de bisección.
def biseccion(a, b, tol=1e-5, max_iter=100):
    if f(a) * f(b) >= 0:  # Verifica que haya un cambio de signo en el intervalo [a, b].
        print("El método de bisección no es aplicable en el intervalo dado.")  # Mensaje de error si no hay raíces.
        return None  # Retorna None si la condición no se cumple.

    iteraciones = []  # Lista para almacenar los valores de c en cada iteración.
    errores_abs = []  # Lista para almacenar los errores absolutos.
    errores_rel = []  # Lista para almacenar los errores relativos.
    errores_cua = []  # Lista para almacenar los errores cuadráticos.

    c_old = a  # Variable para almacenar el valor anterior de c y calcular errores.

    print("\nIteraciones del Método de Bisección:")
    print("Iter |       a       |       b       |       c       |      f(c)      |     Error Absoluto  | Error Relativo  | Error Cuadrático    ")
    print("-" * 85)

    for i in range(max_iter):  # Ciclo que se repite hasta alcanzar la tolerancia o el número máximo de iteraciones.
        c = (a + b) / 2  # Calcula el punto medio del intervalo.
        iteraciones.append(c)  # Guarda el valor de c en la lista de iteraciones.

        error_abs = abs(c - c_old)  # Calcula el error absoluto.
        error_rel = error_abs / c  # Calcula el error relativo.
        error_cua = error_abs ** 2  # Calcula el error cuadrático.
        errores_abs.append(error_abs)  # Guarda el error absoluto en la lista.
        errores_rel.append(error_rel)  # Guarda el error relativo en la lista.
        errores_cua.append(error_cua)  # Guarda el error cuadrático en la lista.

        print(f"{i+1:4d} | {a:.8f} | {b:.8f} | {c:.8f} | {f(c):.8f} | {error_abs:.8e} | {error_rel:.8e} | {error_cua:.8e}")

        if abs(f(c)) < tol or error_abs < tol:  # Condición de parada si la función es cercana a 0 o el error es menor a la tolerancia.
            break  # Sale del ciclo.

        if f(a) * f(c) < 0:  # Si f(a) y f(c) tienen signos opuestos, la raíz está en [a, c].
            b = c  # Actualiza b.
        else:  # Si no, la raíz está en [c, b].
            a = c  # Actualiza a.

        c_old = c  # Almacena el valor actual de c para la próxima iteración.

    return iteraciones, errores_abs, errores_rel, errores_cua  # Retorna las listas con los valores obtenidos.

# Parámetros iniciales: intervalo [a, b].
a, b = 0, 1  # Define los valores de a y b.

# Llama a la función bisección y almacena los resultados.
iteraciones, errores_abs, errores_rel, errores_cua = biseccion(a, b)

# Crear la figura para graficar.
fig, ax = plt.subplots(1, 2, figsize=(14, 5))  # Crea dos gráficos en una figura de tamaño 14x5.

# Genera valores de x para graficar la función.
x = np.linspace(a - 1, b + 1, 400)  # Crea 400 puntos entre a-1 y b+1.
y = f(x)  # Evalúa f(x) en esos puntos.

# Primer gráfico: función f(x) y convergencia de iteraciones.
ax[0].plot(x, y, label=r'$f(x) = e^{-x} - x$', color='b')  # Dibuja la función f(x).
ax[0].axhline(0, color='k', linestyle='--', linewidth=1)  # Dibuja una línea horizontal en y=0.
ax[0].scatter(iteraciones, [f(c) for c in iteraciones], color='red', label='Iteraciones')  # Marca los puntos de las iteraciones.
ax[0].set_xlabel('x')  # Etiqueta del eje x.
ax[0].set_ylabel('f(x)')  # Etiqueta del eje y.
ax[0].set_title("Convergencia del Método de Bisección")  # Título del gráfico.
ax[0].legend()  # Muestra la leyenda.
ax[0].grid()  # Agrega una cuadrícula.

# Segundo gráfico: convergencia del error.
ax[1].plot(range(1, len(errores_abs) + 1), errores_abs, marker='o', linestyle='-', label="Error Absoluto", color='r')  # Gráfico del error absoluto.
ax[1].plot(range(1, len(errores_rel) + 1), errores_rel, marker='s', linestyle='-', label="Error Relativo", color='b')  # Gráfico del error relativo.
ax[1].plot(range(1, len(errores_cua) + 1), errores_cua, marker='^', linestyle='-', label="Error Cuadrático", color='g')  # Gráfico del error cuadrático.
ax[1].set_yscale("log")  # Usa una escala logarítmica en el eje y.
ax[1].set_xlabel("Iteración")  # Etiqueta del eje x.
ax[1].set_ylabel("Error")  # Etiqueta del eje y.
ax[1].set_title("En cada Iteración")  # Título del gráfico.
ax[1].grid()  # Agrega una cuadrícula.
ax[1].legend()  # Muestra la leyenda.

# Guardar la figura en un archivo.
plt.savefig("biseccion_convergencia.png", dpi=300)  # Guarda la imagen con una resolución de 300 dpi.

# Mostrar los gráficos.
plt.show()  # Muestra la figura en pantalla.
